<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.edu.fudan.se.cochange_analysis.git.dao.OriginClusterMapper">
	<resultMap id="BaseResultMap"
		type="cn.edu.fudan.se.cochange_analysis.git.bean.OriginCluster">
		<!-- WARNING - @mbg.generated This element is automatically generated by 
			MyBatis Generator, do not modify. -->
		<constructor>
			<arg column="cluster_threshold_id" javaType="java.lang.Integer"
				jdbcType="INTEGER" />
			<arg column="repository_id" javaType="java.lang.Integer"
				jdbcType="INTEGER" />
			<arg column="cluster_id" javaType="java.lang.Integer" jdbcType="INTEGER" />
			<arg column="cluster_size" javaType="java.lang.Double" jdbcType="DOUBLE" />
			<arg column="impact_num" javaType="java.lang.Double" jdbcType="DOUBLE" />
			<arg column="file_name" javaType="java.lang.String" jdbcType="VARCHAR" />
			<arg column="file_type" javaType="java.lang.Integer" jdbcType="INTEGER" />
		</constructor>
	</resultMap>
	<insert id="insert"
		parameterType="cn.edu.fudan.se.cochange_analysis.git.bean.OriginCluster">
		<!-- WARNING - @mbg.generated This element is automatically generated by 
			MyBatis Generator, do not modify. -->
		insert into origin_cluster (cluster_threshold_id, repository_id,
		cluster_id, cluster_size, impact_num,
		file_name, file_type)
		values
		(#{clusterThresholdId,jdbcType=INTEGER},
		#{repositoryId,jdbcType=INTEGER},
		#{clusterId,jdbcType=INTEGER},
		#{clusterSize,jdbcType=DOUBLE}, #{impactNum,jdbcType=DOUBLE},
		#{fileName,jdbcType=VARCHAR}, #{fileType,jdbcType=INTEGER})
	</insert>
	<insert id="insertSelective"
		parameterType="cn.edu.fudan.se.cochange_analysis.git.bean.OriginCluster">
		<!-- WARNING - @mbg.generated This element is automatically generated by 
			MyBatis Generator, do not modify. -->
		insert into origin_cluster
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<if test="clusterThresholdId != null">
				cluster_threshold_id,
			</if>
			<if test="repositoryId != null">
				repository_id,
			</if>
			<if test="clusterId != null">
				cluster_id,
			</if>
			<if test="clusterSize != null">
				cluster_size,
			</if>
			<if test="impactNum != null">
				impact_num,
			</if>
			<if test="fileName != null">
				file_name,
			</if>
			<if test="fileType != null">
				file_type,
			</if>
		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides=",">
			<if test="clusterThresholdId != null">
				#{clusterThresholdId,jdbcType=INTEGER},
			</if>
			<if test="repositoryId != null">
				#{repositoryId,jdbcType=INTEGER},
			</if>
			<if test="clusterId != null">
				#{clusterId,jdbcType=INTEGER},
			</if>
			<if test="clusterSize != null">
				#{clusterSize,jdbcType=DOUBLE},
			</if>
			<if test="impactNum != null">
				#{impactNum,jdbcType=DOUBLE},
			</if>
			<if test="fileName != null">
				#{fileName,jdbcType=VARCHAR},
			</if>
			<if test="fileType != null">
				#{fileType,jdbcType=INTEGER},
			</if>
		</trim>
	</insert>

	<select id="selectByClusterThresholdIdAndMinSizeAndMinRatio"
		resultType="java.lang.Integer">
		select distinct cluster_id from origin_cluster
		where
		repository_id = #{repositoryId, jdbcType=INTEGER}
		and
		cluster_threshold_id = #{clusterThresholdId, jdbcType=INTEGER}
		and
		cluster_size >= #{minSize, jdbcType=DOUBLE}
		and impact_num /
		(cluster_size - 1.0) > #{minRatio, jdbcType=DOUBLE}
	</select>

	<select id="selectByRepositoryIdAndClusterThresholdIdAndClusterId"
		resultMap="BaseResultMap">
		select cluster_threshold_id, repository_id,
		cluster_id,
		cluster_size, impact_num,
		file_name, file_type from origin_cluster
		where
		repository_id =
		#{repositoryId, jdbcType=INTEGER}
		and
		cluster_threshold_id =
		#{clusterThresholdId, jdbcType=INTEGER}
		and
		cluster_id = #{clusterId,
		jdbcType=INTEGER}
	</select>

	<select id="selectByClusterThresholdIdAndMaxSize" resultMap="BaseResultMap">
		select cluster_threshold_id, repository_id,
		cluster_id,
		cluster_size,
		impact_num,
		file_name, file_type from origin_cluster
		where
		repository_id
		=
		#{repositoryId, jdbcType=INTEGER}
		and
		cluster_threshold_id =
		#{clusterThresholdId, jdbcType=INTEGER}
		and
		#{maxSize,
		jdbcType=INTEGER} >= cluster_size
	</select>
</mapper>